export function parsePathData(data) {
    if (!data) {
        return [];
    }
    var cs = data;
    var cc = [
        "m",
        "M",
        "l",
        "L",
        "v",
        "V",
        "h",
        "H",
        "z",
        "Z",
        "c",
        "C",
        "q",
        "Q",
        "t",
        "T",
        "s",
        "S",
        "a",
        "A"
    ];
    cs = cs.replace(new RegExp(" ", "g"), ",");
    for (var n = 0; n < cc.length; n++) {
        cs = cs.replace(new RegExp(cc[n], "g"), "|" + cc[n]);
    }
    var arr = cs.split("|");
    var ca = [];
    var cpx = 0;
    var cpy = 0;
    var arrLength = arr.length;
    var startPoint = null;
    for (var n = 1; n < arrLength; n++) {
        var str = arr[n];
        var c = str.charAt(0);
        str = str.slice(1);
        str = str.replace(new RegExp(",-", "g"), "-");
        str = str.replace(new RegExp("-", "g"), ",-");
        str = str.replace(new RegExp("e,-", "g"), "e-");
        var p = str.split(",");
        if (p.length > 0 && p[0] === "") {
            p.shift();
        }
        var pLength = p.length;
        for (var i = 0; i < pLength; i++) {
            p[i] = parseFloat(p[i]);
        }
        if (c === "z" || c === "Z") {
            p = [true];
        }
        while (p.length > 0) {
            if (isNaN(p[0])) {
                break;
            }
            var cmd = null;
            var points = [];
            var startX = cpx, startY = cpy;
            var prevCmd = void 0, ctlPtx = void 0, ctlPty = void 0;
            var rx = void 0, ry = void 0, psi = void 0, fa = void 0, fs = void 0, x1 = void 0, y1 = void 0;
            var dx = void 0, dy = void 0;
            switch (c) {
                case "l":
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "L";
                    points.push(cpx, cpy);
                    break;
                case "L":
                    cpx = p.shift();
                    cpy = p.shift();
                    points.push(cpx, cpy);
                    break;
                case "m":
                    dx = p.shift();
                    dy = p.shift();
                    cpx += dx;
                    cpy += dy;
                    if (startPoint == null) {
                        startPoint = [cpx, cpy];
                    }
                    cmd = "M";
                    points.push(cpx, cpy);
                    c = "l";
                    break;
                case "M":
                    cpx = p.shift();
                    cpy = p.shift();
                    cmd = "M";
                    if (startPoint == null) {
                        startPoint = [cpx, cpy];
                    }
                    points.push(cpx, cpy);
                    c = "L";
                    break;
                case "h":
                    cpx += p.shift();
                    cmd = "L";
                    points.push(cpx, cpy);
                    break;
                case "H":
                    cpx = p.shift();
                    cmd = "L";
                    points.push(cpx, cpy);
                    break;
                case "v":
                    cpy += p.shift();
                    cmd = "L";
                    points.push(cpx, cpy);
                    break;
                case "V":
                    cpy = p.shift();
                    cmd = "L";
                    points.push(cpx, cpy);
                    break;
                case "C":
                    points.push(p.shift(), p.shift(), p.shift(), p.shift());
                    cpx = p.shift();
                    cpy = p.shift();
                    points.push(cpx, cpy);
                    break;
                case "c":
                    points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "C";
                    points.push(cpx, cpy);
                    break;
                case "S":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    prevCmd = ca[ca.length - 1];
                    if (prevCmd.command === "C") {
                        ctlPtx = cpx + (cpx - prevCmd.points[2]);
                        ctlPty = cpy + (cpy - prevCmd.points[3]);
                    }
                    points.push(ctlPtx, ctlPty, p.shift(), p.shift());
                    cpx = p.shift();
                    cpy = p.shift();
                    cmd = "C";
                    points.push(cpx, cpy);
                    break;
                case "s":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    prevCmd = ca[ca.length - 1];
                    if (prevCmd.command === "C") {
                        ctlPtx = cpx + (cpx - prevCmd.points[2]);
                        ctlPty = cpy + (cpy - prevCmd.points[3]);
                    }
                    points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "C";
                    points.push(cpx, cpy);
                    break;
                case "Q":
                    points.push(p.shift(), p.shift());
                    cpx = p.shift();
                    cpy = p.shift();
                    points.push(cpx, cpy);
                    break;
                case "q":
                    points.push(cpx + p.shift(), cpy + p.shift());
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "Q";
                    points.push(cpx, cpy);
                    break;
                case "T":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    prevCmd = ca[ca.length - 1];
                    if (prevCmd.command === "Q") {
                        ctlPtx = cpx + (cpx - prevCmd.points[0]);
                        ctlPty = cpy + (cpy - prevCmd.points[1]);
                    }
                    cpx = p.shift();
                    cpy = p.shift();
                    cmd = "Q";
                    points.push(ctlPtx, ctlPty, cpx, cpy);
                    break;
                case "t":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    prevCmd = ca[ca.length - 1];
                    if (prevCmd.command === "Q") {
                        ctlPtx = cpx + (cpx - prevCmd.points[0]);
                        ctlPty = cpy + (cpy - prevCmd.points[1]);
                    }
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "Q";
                    points.push(ctlPtx, ctlPty, cpx, cpy);
                    break;
                case "A":
                    rx = p.shift();
                    ry = p.shift();
                    psi = p.shift();
                    fa = p.shift();
                    fs = p.shift();
                    x1 = cpx;
                    y1 = cpy;
                    cpx = p.shift();
                    cpy = p.shift();
                    cmd = "A";
                    points = [[x1, y1], rx, ry, psi, fa, fs, [cpx, cpy]];
                    break;
                case "a":
                    rx = p.shift();
                    ry = p.shift();
                    psi = p.shift();
                    fa = p.shift();
                    fs = p.shift();
                    x1 = cpx;
                    y1 = cpy;
                    cpx += p.shift();
                    cpy += p.shift();
                    cmd = "A";
                    points = [[x1, y1], rx, ry, psi, fa, fs, [cpx, cpy]];
                    break;
                case "z":
                    cmd = "Z";
                    if (startPoint) {
                        cpx = startPoint[0];
                        cpy = startPoint[1];
                        startPoint = null;
                    }
                    else {
                        cpx = 0;
                        cpy = 0;
                    }
                    p.shift();
                    points = [cpx, cpy];
                    break;
                case "Z":
                    cmd = "Z";
                    if (startPoint) {
                        cpx = startPoint[0];
                        cpy = startPoint[1];
                        startPoint = null;
                    }
                    else {
                        cpx = 0;
                        cpy = 0;
                    }
                    p.shift();
                    points = [cpx, cpy];
                    break;
            }
            ca.push({
                command: cmd || c,
                points: points,
                start: {
                    x: startX,
                    y: startY
                }
            });
        }
    }
    return ca;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU1ZHUGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TVkdQYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxhQUFhLENBQUMsSUFBSTtJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztJQUNkLElBQU0sRUFBRSxHQUFHO1FBQ1QsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7S0FDSixDQUFDO0lBQ0YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7SUFDRCxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLElBQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksR0FBRyxHQUFHLENBQUMs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Q0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDcEIsVUFBVSxHQUFHLElBQUksQ0FBQztxQkFDbkI7eUJBQU07d0JBQ0wsR0FBRyxHQUFHLENBQUMsQ0FBQzt3QkFDUixHQUFHLEdBQUcsQ0FBQyxDQUFDO3FCQUNUO29CQUNELENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDVixNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLE1BQU07YUFDVDtZQUVELEVBQUUsQ0FBQyxJQUFJLENBQUM7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxLQUFLLEVBQUU7b0JBQ0wsQ0FBQyxFQUFFLE1BQU07b0JBQ1QsQ0FBQyxFQUFFLE1BQU07aUJBQ1Y7YUFDRixDQUFDLENBQUM7U0FDSjtLQUNGO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGF0aERhdGEoZGF0YSkge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbGV0IGNzID0gZGF0YTtcbiAgY29uc3QgY2MgPSBbXG4gICAgXCJtXCIsXG4gICAgXCJNXCIsXG4gICAgXCJsXCIsXG4gICAgXCJMXCIsXG4gICAgXCJ2XCIsXG4gICAgXCJWXCIsXG4gICAgXCJoXCIsXG4gICAgXCJIXCIsXG4gICAgXCJ6XCIsXG4gICAgXCJaXCIsXG4gICAgXCJjXCIsXG4gICAgXCJDXCIsXG4gICAgXCJxXCIsXG4gICAgXCJRXCIsXG4gICAgXCJ0XCIsXG4gICAgXCJUXCIsXG4gICAgXCJzXCIsXG4gICAgXCJTXCIsXG4gICAgXCJhXCIsXG4gICAgXCJBXCJcbiAgXTtcbiAgY3MgPSBjcy5yZXBsYWNlKG5ldyBSZWdFeHAoXCIgXCIsIFwiZ1wiKSwgXCIsXCIpO1xuICBmb3IgKGxldCBuID0gMDsgbiA8IGNjLmxlbmd0aDsgbisrKSB7XG4gICAgY3MgPSBjcy5yZXBsYWNlKG5ldyBSZWdFeHAoY2Nbbl0sIFwiZ1wiKSwgXCJ8XCIgKyBjY1tuXSk7XG4gIH1cbiAgY29uc3QgYXJyID0gY3Muc3BsaXQoXCJ8XCIpO1xuICBjb25zdCBjYSA9IFtdO1xuICBsZXQgY3B4ID0gMDtcbiAgbGV0IGNweSA9IDA7XG4gIGNvbnN0IGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG4gIGxldCBzdGFydFBvaW50ID0gbnVsbDtcbiAgZm9yIChsZXQgbiA9IDE7IG4gPCBhcnJMZW5ndGg7IG4rKykge1xuICAgIGxldCBzdHIgPSBhcnJbbl07XG4gICAgbGV0IGMgPSBzdHIuY2hhckF0KDApO1xuICAgIHN0ciA9IHN0ci5zbGljZSgxKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiLC1cIiwgXCJnXCIpLCBcIi1cIik7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIi1cIiwgXCJnXCIpLCBcIiwtXCIpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJlLC1cIiwgXCJnXCIpLCBcImUtXCIpO1xuICAgIGxldCBwID0gc3RyLnNwbGl0KFwiLFwiKTtcbiAgICBpZiAocC5sZW5ndGggPiAwICYmIHBbMF0gPT09IFwiXCIpIHtcbiAgICAgIHAuc2hpZnQoKTtcbiAgICB9XG4gICAgY29uc3QgcExlbmd0aCA9IHAubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcExlbmd0aDsgaSsrKSB7XG4gICAgICBwW2ldID0gcGFyc2VGbG9hdChwW2ldKTtcbiAgICB9XG4gICAgaWYgKGMgPT09IFwielwiIHx8IGMgPT09IFwiWlwiKSB7XG4gICAgICBwID0gW3RydWVdO1xuICAgIH1cblxuICAgIHdoaWxlIChwLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChpc05hTihwWzBdKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGxldCBjbWQgPSBudWxsO1xuICAgICAgbGV0IHBvaW50cyA9IFtdO1xuICAgICAgY29uc3Qgc3RhcnRYID0gY3B4LFxuICAgICAgICBzdGFydFkgPSBjcHk7XG4gICAgICBsZXQgcHJldkNtZCwgY3RsUHR4LCBjdGxQdHk7XG4gICAgICBsZXQgcngsIHJ5LCBwc2ksIGZhLCBmcywgeDEsIHkxO1xuICAgICAgbGV0IGR4LCBkeTtcblxuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgXCJsXCI6XG4gICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNtZCA9IFwiTFwiO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgZHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgZHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY3B4ICs9IGR4O1xuICAgICAgICAgIGNweSArPSBkeTtcbiAgICAgICAgICBpZiAoc3RhcnRQb2ludCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ID0gW2NweCwgY3B5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY21kID0gXCJNXCI7XG4gICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgIGMgPSBcImxcIjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY21kID0gXCJNXCI7XG4gICAgICAgICAgaWYgKHN0YXJ0UG9pbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnRQb2ludCA9IFtjcHgsIGNweV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBjID0gXCJMXCI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNtZCA9IFwiTFwiO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiSFwiOlxuICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjbWQgPSBcIkxcIjtcbiAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInZcIjpcbiAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNtZCA9IFwiTFwiO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiVlwiOlxuICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjbWQgPSBcIkxcIjtcbiAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIkNcIjpcbiAgICAgICAgICBwb2ludHMucHVzaChwLnNoaWZ0KCksIHAuc2hpZnQoKSwgcC5zaGlmdCgpLCBwLnNoaWZ0KCkpO1xuICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgcG9pbnRzLnB1c2goXG4gICAgICAgICAgICBjcHggKyBwLnNoaWZ0KCksXG4gICAgICAgICAgICBjcHkgKyBwLnNoaWZ0KCksXG4gICAgICAgICAgICBjcHggKyBwLnNoaWZ0KCksXG4gICAgICAgICAgICBjcHkgKyBwLnNoaWZ0KClcbiAgICAgICAgICApO1xuICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjbWQgPSBcIkNcIjtcbiAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSBcIkNcIikge1xuICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzJdKTtcbiAgICAgICAgICAgIGN0bFB0eSA9IGNweSArIChjcHkgLSBwcmV2Q21kLnBvaW50c1szXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50cy5wdXNoKGN0bFB0eCwgY3RsUHR5LCBwLnNoaWZ0KCksIHAuc2hpZnQoKSk7XG4gICAgICAgICAgY3B4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNweSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjbWQgPSBcIkNcIjtcbiAgICAgICAgICBwb2ludHMucHVzaChjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSBcIkNcIikge1xuICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzJdKTtcbiAgICAgICAgICAgIGN0bFB0eSA9IGNweSArIChjcHkgLSBwcmV2Q21kLnBvaW50c1szXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50cy5wdXNoKGN0bFB0eCwgY3RsUHR5LCBjcHggKyBwLnNoaWZ0KCksIGNweSArIHAuc2hpZnQoKSk7XG4gICAgICAgICAgY3B4ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNtZCA9IFwiQ1wiO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiUVwiOlxuICAgICAgICAgIHBvaW50cy5wdXNoKHAuc2hpZnQoKSwgcC5zaGlmdCgpKTtcbiAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCwgY3B5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgIHBvaW50cy5wdXNoKGNweCArIHAuc2hpZnQoKSwgY3B5ICsgcC5zaGlmdCgpKTtcbiAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY21kID0gXCJRXCI7XG4gICAgICAgICAgcG9pbnRzLnB1c2goY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJUXCI6XG4gICAgICAgICAgY3RsUHR4ID0gY3B4O1xuICAgICAgICAgIGN0bFB0eSA9IGNweTtcbiAgICAgICAgICBwcmV2Q21kID0gY2FbY2EubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKHByZXZDbWQuY29tbWFuZCA9PT0gXCJRXCIpIHtcbiAgICAgICAgICAgIGN0bFB0eCA9IGNweCArIChjcHggLSBwcmV2Q21kLnBvaW50c1swXSk7XG4gICAgICAgICAgICBjdGxQdHkgPSBjcHkgKyAoY3B5IC0gcHJldkNtZC5wb2ludHNbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjcHggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY3B5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNtZCA9IFwiUVwiO1xuICAgICAgICAgIHBvaW50cy5wdXNoKGN0bFB0eCwgY3RsUHR5LCBjcHgsIGNweSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInRcIjpcbiAgICAgICAgICBjdGxQdHggPSBjcHg7XG4gICAgICAgICAgY3RsUHR5ID0gY3B5O1xuICAgICAgICAgIHByZXZDbWQgPSBjYVtjYS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAocHJldkNtZC5jb21tYW5kID09PSBcIlFcIikge1xuICAgICAgICAgICAgY3RsUHR4ID0gY3B4ICsgKGNweCAtIHByZXZDbWQucG9pbnRzWzBdKTtcbiAgICAgICAgICAgIGN0bFB0eSA9IGNweSArIChjcHkgLSBwcmV2Q21kLnBvaW50c1sxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNweCArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY3B5ICs9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjbWQgPSBcIlFcIjtcbiAgICAgICAgICBwb2ludHMucHVzaChjdGxQdHgsIGN0bFB0eSwgY3B4LCBjcHkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJBXCI6XG4gICAgICAgICAgcnggPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgcnkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgcHNpID0gcC5zaGlmdCgpO1xuICAgICAgICAgIGZhID0gcC5zaGlmdCgpO1xuICAgICAgICAgIGZzID0gcC5zaGlmdCgpO1xuICAgICAgICAgIHgxID0gY3B4O1xuICAgICAgICAgIHkxID0gY3B5O1xuICAgICAgICAgIGNweCA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBjcHkgPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY21kID0gXCJBXCI7XG4gICAgICAgICAgcG9pbnRzID0gW1t4MSwgeTFdLCByeCwgcnksIHBzaSwgZmEsIGZzLCBbY3B4LCBjcHldXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgIHJ4ID0gcC5zaGlmdCgpO1xuICAgICAgICAgIHJ5ID0gcC5zaGlmdCgpO1xuICAgICAgICAgIHBzaSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBmYSA9IHAuc2hpZnQoKTtcbiAgICAgICAgICBmcyA9IHAuc2hpZnQoKTtcbiAgICAgICAgICB4MSA9IGNweDtcbiAgICAgICAgICB5MSA9IGNweTtcbiAgICAgICAgICBjcHggKz0gcC5zaGlmdCgpO1xuICAgICAgICAgIGNweSArPSBwLnNoaWZ0KCk7XG4gICAgICAgICAgY21kID0gXCJBXCI7XG4gICAgICAgICAgcG9pbnRzID0gW1t4MSwgeTFdLCByeCwgcnksIHBzaSwgZmEsIGZzLCBbY3B4LCBjcHldXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwielwiOlxuICAgICAgICAgIGNtZCA9IFwiWlwiO1xuICAgICAgICAgIGlmIChzdGFydFBvaW50KSB7XG4gICAgICAgICAgICBjcHggPSBzdGFydFBvaW50WzBdO1xuICAgICAgICAgICAgY3B5ID0gc3RhcnRQb2ludFsxXTtcbiAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcHggPSAwO1xuICAgICAgICAgICAgY3B5ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcC5zaGlmdCgpO1xuICAgICAgICAgIHBvaW50cyA9IFtjcHgsIGNweV07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICBjbWQgPSBcIlpcIjtcbiAgICAgICAgICBpZiAoc3RhcnRQb2ludCkge1xuICAgICAgICAgICAgY3B4ID0gc3RhcnRQb2ludFswXTtcbiAgICAgICAgICAgIGNweSA9IHN0YXJ0UG9pbnRbMV07XG4gICAgICAgICAgICBzdGFydFBvaW50ID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3B4ID0gMDtcbiAgICAgICAgICAgIGNweSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHAuc2hpZnQoKTtcbiAgICAgICAgICBwb2ludHMgPSBbY3B4LCBjcHldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYS5wdXNoKHtcbiAgICAgICAgY29tbWFuZDogY21kIHx8IGMsXG4gICAgICAgIHBvaW50czogcG9pbnRzLFxuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIHg6IHN0YXJ0WCxcbiAgICAgICAgICB5OiBzdGFydFlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYTtcbn1cbiJdfQ==