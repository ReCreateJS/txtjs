import { __extends } from "tslib";
import Case from "./Case";
import FontLoader from "./FontLoader";
/**
 * Represents a styled character
 */
var Character = /** @class */ (function (_super) {
    __extends(Character, _super);
    function Character(character, style, index) {
        if (index === void 0) { index = null; }
        var _this = _super.call(this) || this;
        _this.character = "";
        _this.characterCode = null;
        _this.font = null;
        _this.tracking = null;
        _this.characterCase = null;
        _this.characterCaseOffset = 0;
        _this.index = null;
        _this.size = null;
        _this.fillColor = null;
        _this.strokeColor = null;
        _this.strokeWidth = null;
        _this.measuredWidth = null;
        _this.measuredHeight = null;
        _this.hPosition = null;
        _this.missing = false;
        _this.set(style);
        _this.index = index;
        var upperSmall;
        // flip case depending on characterCase property
        if (_this.characterCase == Case.NORMAL) {
            _this.character = character;
        }
        else if (_this.characterCase == Case.UPPER) {
            _this.character = character.toUpperCase();
        }
        else if (_this.characterCase == Case.LOWER) {
            _this.character = character.toLowerCase();
        }
        else if (_this.characterCase == Case.SMALL_CAPS) {
            _this.character = character.toUpperCase();
            upperSmall = !(character === _this.character);
        }
        else {
            //fallback case for unknown.
            _this.character = character;
        }
        _this.characterCode = _this.character.charCodeAt(0);
        _this._font = FontLoader.getFont(_this.font);
        if (_this._font.glyphs[_this.characterCode]) {
            _this._glyph = _this._font.glyphs[_this.characterCode];
            //flip lower
        }
        else if (_this._font.glyphs[String.fromCharCode(_this.characterCode)
            .toLowerCase()
            .charCodeAt(0)]) {
            _this._glyph = _this._font.glyphs[String.fromCharCode(_this.characterCode)
                .toLowerCase()
                .charCodeAt(0)];
            //flip upper
        }
        else if (_this._font.glyphs[String.fromCharCode(_this.characterCode)
            .toUpperCase()
            .charCodeAt(0)]) {
            _this._glyph = _this._font.glyphs[String.fromCharCode(_this.characterCode)
                .toUpperCase()
                .charCodeAt(0)];
        }
        //missing glyph
        if (_this._glyph === undefined) {
            console.log("MISSING GLYPH:" + _this.character);
            _this._glyph = _this._font.glyphs[42];
            _this.missing = true;
        }
        _this.graphics = _this._glyph.graphic();
        // scale x
        if (_this.characterCase === Case.SMALL_CAPS) {
            if (upperSmall) {
                _this.scaleX = (_this.size / _this._font.units) * 0.8;
                _this.characterCaseOffset = -0.2 * (_this._glyph.offset * _this.size);
            }
            else {
                _this.scaleX = _this.size / _this._font.units;
            }
        }
        else {
            _this.scaleX = _this.size / _this._font.units;
        }
        _this.scaleY = -_this.scaleX;
        _this.measuredHeight =
            (_this._font.ascent - _this._font.descent) * _this.scaleX;
        _this.measuredWidth = _this.scaleX * _this._glyph.offset * _this._font.units;
        var ha = new createjs.Shape();
        ha.graphics
            .beginFill("#000")
            .drawRect(0, _this._font.descent, _this._glyph.offset * _this._font.units, _this._font.ascent - _this._font.descent);
        _this.hitArea = ha;
        return _this;
    }
    Character.prototype.setGlyph = function (glyph) {
        this._glyph = glyph;
        this.graphics = this._glyph.graphic();
    };
    Character.prototype.trackingOffset = function () {
        return this.size * (2.5 / this._font.units + 1 / 900 + this.tracking / 990);
    };
    Character.prototype.draw = function (ctx) {
        this._glyph._fill.style = this.fillColor;
        this._glyph._fill.matrix = null;
        this._glyph._stroke.style = this.strokeColor;
        this._glyph._strokeStyle.width = this.strokeWidth;
        return this._glyph.draw(ctx);
    };
    Character.prototype.getWidth = function () {
        return this.size * this._glyph.offset;
    };
    return Character;
}(createjs.Shape));
export default Character;
//# sourceMappingURL=data:application/json;base64,