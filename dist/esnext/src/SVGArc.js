var SVGArc = /** @class */ (function () {
    function SVGArc(x1, rx, ry, phiarg, fA, fS, x2) {
        this.rx = rx;
        this.ry = ry;
        this.x2 = x2;
        if (rx == 0 || ry == 0) {
            return;
        }
        var phi = phiarg * (Math.PI / 180.0);
        rx = Math.abs(rx);
        ry = Math.abs(ry);
        var xPrime = this.rotClockwise(this.midPoint(x1, x2), phi); // F.6.5.1
        var xPrime2 = this.pointMul(xPrime, xPrime);
        var rx2 = Math.pow(rx, 2);
        var ry2 = Math.pow(ry, 2);
        var lambda = Math.sqrt(xPrime2[0] / rx2 + xPrime2[1] / ry2);
        if (lambda > 1) {
            rx *= lambda;
            ry *= lambda;
            rx2 = Math.pow(rx, 2);
            ry2 = Math.pow(ry, 2);
        }
        var t = rx2 * ry2 - rx2 * xPrime2[1] - ry2 * xPrime2[0];
        if (t > -0.000001 && t < 0.000001) {
            t = 0;
        }
        var b = rx2 * xPrime2[1] + ry2 * xPrime2[0];
        if (b > -0.000001 && b < 0.000001) {
            b = 0;
        }
        var factor = Math.sqrt(t / b);
        if (fA == fS) {
            factor *= -1.0;
        }
        var cPrime = this.scale(factor, [
            (rx * xPrime[1]) / ry,
            (-ry * xPrime[0]) / rx
        ]);
        var c = this.sum(this.rotCounterClockwise(cPrime, phi), this.meanVec(x1, x2));
        var x1UnitVector = [
            (xPrime[0] - cPrime[0]) / rx,
            (xPrime[1] - cPrime[1]) / ry
        ];
        var x2UnitVector = [
            (-1.0 * xPrime[0] - cPrime[0]) / rx,
            (-1.0 * xPrime[1] - cPrime[1]) / ry
        ];
        var theta = this.angle([1, 0], x1UnitVector);
        var deltaTheta = this.angle(x1UnitVector, x2UnitVector);
        if (isNaN(deltaTheta)) {
            deltaTheta = Math.PI;
        }
        var start = theta;
        var end = theta + deltaTheta;
        this.cx = c[0];
        this.cy = c[1];
        this.phi = phi;
        this.rx = rx;
        this.ry = ry;
        this.start = start;
        this.end = end;
        this.fS = !fS;
    }
    SVGArc.prototype.mag = function (v) {
        return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
    };
    SVGArc.prototype.meanVec = function (u, v) {
        return [(u[0] + v[0]) / 2.0, (u[1] + v[1]) / 2.0];
    };
    SVGArc.prototype.dot = function (u, v) {
        return u[0] * v[0] + u[1] * v[1];
    };
    SVGArc.prototype.ratio = function (u, v) {
        return this.dot(u, v) / (this.mag(u) * this.mag(v));
    };
    SVGArc.prototype.rotClockwise = function (v, angle) {
        var cost = Math.cos(angle);
        var sint = Math.sin(angle);
        return [cost * v[0] + sint * v[1], -1 * sint * v[0] + cost * v[1]];
    };
    SVGArc.prototype.pointMul = function (u, v) {
        return [u[0] * v[0], u[1] * v[1]];
    };
    SVGArc.prototype.scale = function (c, v) {
        return [c * v[0], c * v[1]];
    };
    SVGArc.prototype.sum = function (u, v) {
        return [u[0] + v[0], u[1] + v[1]];
    };
    SVGArc.prototype.angle = function (u, v) {
        var sign = 1.0;
        if (u[0] * v[1] - u[1] * v[0] < 0) {
            sign = -1.0;
        }
        return sign * Math.acos(this.ratio(u, v));
    };
    SVGArc.prototype.rotCounterClockwise = function (v, angle) {
        var cost = Math.cos(angle);
        var sint = Math.sin(angle);
        return [cost * v[0] - sint * v[1], sint * v[0] + cost * v[1]];
    };
    SVGArc.prototype.midPoint = function (u, v) {
        return [(u[0] - v[0]) / 2.0, (u[1] - v[1]) / 2.0];
    };
    SVGArc.prototype.exec = function (ctx) {
        if (this.rx == 0 || this.ry == 0) {
            ctx.lineTo(this.x2[0], this.x2[1]);
            return;
        }
        ctx.translate(this.cx, this.cy);
        ctx.rotate(this.phi);
        ctx.scale(this.rx, this.ry);
        ctx.arc(0, 0, 1, this.start, this.end, this.fS);
        ctx.scale(1 / this.rx, 1 / this.ry);
        ctx.rotate(-this.phi);
        ctx.translate(-this.cx, -this.cy);
    };
    return SVGArc;
}());
export default SVGArc;
//# sourceMappingURL=data:application/json;base64,