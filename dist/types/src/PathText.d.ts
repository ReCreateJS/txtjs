/// <reference types="easeljs" />
import TextContainer from "./TextContainer";
import { ConstructObj } from "./Interfaces";
import Path, { PathFit, PathAlign } from "./Path";
import VerticalAlign from "./VerticalAlign";
import Character from "./Character";
export default class PathText extends TextContainer {
    size: number;
    tracking: number;
    ligatures: boolean;
    minSize: number;
    maxTracking: number;
    fillColor: string;
    strokeColor: string;
    strokeWidth: number;
    debug: boolean;
    characters: Character[];
    block: createjs.Container;
    original: ConstructObj;
    autoExpand: boolean;
    autoReduce: boolean;
    overset: boolean;
    oversetIndex: number;
    pathPoints: Path;
    path: string;
    start: number;
    end: number;
    flipped: boolean;
    fit: PathFit;
    align: PathAlign;
    valign: VerticalAlign;
    missingGlyphs: any[];
    renderCycle: boolean;
    valignPercent: number;
    initialTracking: number;
    initialOffset: number;
    measured: boolean;
    oversetPotential: boolean;
    constructor(props?: ConstructObj);
    setPath(path: string): void;
    setStart(start: number): void;
    setEnd(end: number): void;
    setFlipped(flipped: boolean): void;
    setFit(fit?: PathFit): void;
    setAlign(align?: PathAlign): void;
    getWidth(): number;
    layout(): void;
    private addDebugLayout;
    measure(): boolean;
    characterLayout(): boolean;
    trackingOffset(tracking: number, size: number, units: number): number;
    offsetTracking(offset: number, size: number, units: number): number;
}
